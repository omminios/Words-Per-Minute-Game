#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const yargs = require("yargs");
const environment_template_handler_1 = require("./environment-template-handler");
const argument_parser_1 = require("./argument-parser");
yargs
    .command('process', 'replace template file with environment variables', y => {
    return y.option('t', {
        alias: 'templatePath',
        describe: 'the template file',
        nargs: 1,
        required: true,
    });
}, replaceWithTemplate)
    .example('$0 process -t foo.js', 'replace the specified file with its processed .template')
    .demandCommand(1)
    .option('h', {
    alias: 'help',
    description: 'display help message',
})
    .epilog('for more information see https://github.com/GaryB432/venv')
    .alias('v', 'version')
    .version(() => require('../package').version)
    .describe('v', 'show version information')
    .help().argv;
function replaceWithTemplate(yav) {
    return __awaiter(this, void 0, void 0, function* () {
        const opts = argument_parser_1.readArguments(yav);
        const eth = new environment_template_handler_1.EnvironmentTemplateHandler();
        eth
            .renderEnvContextTemplateFile(opts.filePath.concat('.template'), process)
            .then(data => {
            fs.writeFile(opts.filePath, data).then(() => console.log(opts.filePath));
        })
            .catch(e => {
            console.log(e.message);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVudi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy92ZW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsK0JBQStCO0FBQy9CLCtCQUFnQztBQUVoQyxpRkFBNEU7QUFFNUUsdURBQWtEO0FBRWxELEtBQUs7S0FDRixPQUFPLENBQ04sU0FBUyxFQUNULGtEQUFrRCxFQUNsRCxDQUFDO0lBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ25CLEtBQUssRUFBRSxjQUFjO1FBQ3JCLFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsS0FBSyxFQUFFLENBQUM7UUFDUixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztBQUNMLENBQUMsRUFDRCxtQkFBbUIsQ0FDcEI7S0FDQSxPQUFPLENBQ04sc0JBQXNCLEVBQ3RCLHlEQUF5RCxDQUMxRDtLQUNBLGFBQWEsQ0FBQyxDQUFDLENBQUM7S0FDaEIsTUFBTSxDQUFDLEdBQUcsRUFBRTtJQUNYLEtBQUssRUFBRSxNQUFNO0lBQ2IsV0FBVyxFQUFFLHNCQUFzQjtDQUNwQyxDQUFDO0tBQ0QsTUFBTSxDQUFDLDJEQUEyRCxDQUFDO0tBQ25FLEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO0tBQ3JCLE9BQU8sQ0FBQyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUM7S0FDNUMsUUFBUSxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQztLQUN6QyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFFZiw2QkFBbUMsR0FBb0I7O1FBQ3JELE1BQU0sSUFBSSxHQUFHLCtCQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSx5REFBMEIsRUFBRSxDQUFDO1FBQzdDLEdBQUc7YUFDQSw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxPQUFPLENBQUM7YUFDeEUsSUFBSSxDQUFDLElBQUk7WUFDUixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQztZQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUFBIn0=